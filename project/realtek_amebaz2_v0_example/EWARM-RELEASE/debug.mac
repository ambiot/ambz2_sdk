FlashControllerReset()
{
	__var reg0;
	reg0 = __readMemory32(0x40000230, "Memory");
	reg0 = reg0 & (~(0x1<<8));
	__writeMemory32(reg0, 0x40000238, "Memory");
	reg0 = __readMemory32(0x40000210, "Memory");
	reg0 = reg0 & (~(0x1<<4));
	__writeMemory32(reg0, 0x40000210, "Memory");
	reg0 = __readMemory32(0x40000210, "Memory");
	reg0 = reg0 | (0x1<<4);
	__writeMemory32(reg0, 0x40000210, "Memory");
	reg0 = __readMemory32(0x40000230, "Memory");
	reg0 = reg0 | (0x1<<8);
	__writeMemory32(reg0, 0x40000238, "Memory");
}

WDTReset()
{
	__var tmr;
	__var reg0;
	__var reg1;

	//read cut version
	reg0 = __readMemory32(0x400001F0, "Memory");
	reg0 = (reg0 >> 4) & 0xF;
	//read idau setting
	reg1 = __readMemory32(0x50004140, "Memory");
	reg1 = reg1 & 0xF;
	//not acut version, then will use wdt reset to reset peripherals and cpu will park at ram start
	if (reg0 != 0x0) {
        reg0 = __readMemory32(0x400000F0, "Memory");
        reg0 &= 0xFFFF0000;
		__writeMemory32(0, 0x10000480, "Memory"); //disable fast boot
		//use boot reason code JTAG_RESET to halt cpu at ram start
		reg0 = __readMemory32(0x400000F4, "Memory");
		reg0 |= (0x1<<2);
		__writeMemory32(reg0, 0x400000F4, "Memory");
		__message "WDT Reset....";
		tmr = (1<<30)|(1<<25)|(0xA5<<16)|(1<<0); // 0x42A50001
		__writeMemory32(tmr, 0x40002800, "Memory");
		__delay(2000);
        __hwReset(0);
		reg0 = reg0 & (~(0x1<<2));
		__writeMemory32(reg0, 0x400000F4, "Memory");
		reg0 = __readMemory32(0x400000F4, "Memory");
		__message "reset reason: ", reg0:%x, "\n";
        reg0 = __readMemory32(0x400000F0, "Memory");
        reg0 = (reg0 & 0xFFFF) | 0x8710;
        __writeMemory32(reg0, 0x400000F0, "Memory");
	}
}

//load flash loader to return to spi mode but not downloading the application image
FlashReset()
{
    __var t2;
    __var temp;
    __var ret;
    __message "FlashReset....";

    t2 = __loadImage("$PROJ_DIR$\\..\\..\\..\\component\\soc\\realtek\\8710c\\misc\\iar_utility\\flashloader\\FlashRTL8710c.out", 0x0, 0);
    temp = (int)&theFlashParams;
    __writeMemory32(0x98000000, temp, "Memory");
    __writeMemory32(0, temp+4, "Memory");
    __writeMemory32(0, temp+8, "Memory");
    __writeMemory32((int)&FlashBufferStart, temp+12, "Memory");
    __writeMemory32(0x1000, temp+16, "Memory");

    temp = (int)&gRamStartFun;
    __writeMemory32(temp, 0x100000a8, "Memory"); //use fast boot

    temp = (int)&FlashBreak;
    ret = __hwRunToBreakpoint(temp, 1000);
    if(ret >= 0)
        __message "Flash Init done....";
    __clearBreak(temp);

    temp = (int)&gRamStartFun;
    __writeMemory32(0, temp, "Memory"); //disable fast boot  

    __unloadImage(t2);
}

execUserPreload()
{
    __var t2;
    __message "execUserPreload....";
}

execUserSetup()
{
    __var t2;
    __var temp;
    __message "execUserSetup....";
}

execUserPreReset()
{
    __message "execUserPreReset...";	
    //WDTReset();
    FlashControllerReset();
}

execUserReset()
{
    __var t2;
    __var reg0;
    __message "execUserReset....";

    //FlashReset(); //Temp fix for IAR debugger issue in IAR 8.32.1 and 8.40.1

    if(__driverType("ijet")){
        __hwJetResetWithStrategy(1, 2);
    }else if(__driverType("cmsisdap")){
        __hwResetWithStrategy(0, 2);
    }else if(__driverType("jlink")){
        __hwResetWithStrategy(0, 3);
    }
}

execUserCoreConnect()
{
    __message "execUserCoreConnect...";	
}

execUserExecutionStopped()
{
    __var t2;

    __message "execUserExecutionStopped...";
    __writeMemory32(0, 0xE000ED00+0x250, "Memory");
}

DcacheCleanAndInvalidate()
{
    __var sets;
    __var ways;
    __var ccsidr;
    __var tmp;
    __var i;
    __var j;
    ccsidr = __readMemory32(0xE000ED00 + 0x80, "Memory");

    sets = (ccsidr>>13)&0x7fff;
    ways = (ccsidr>>3)&0x3ff;

    for(i=0;i<sets;i++){
        for(j=0;j<ways;j++){
            tmp = ((i&0x1ff)<<5)|((j&0x3)<<30);
            __writeMemory32(tmp, 0xE000ED00+0x274, "Memory");
        }
    }
}

execUserExecutionStarted()
{
    __var t2;
    __message "execUserExecutionStarted...";	
    DcacheCleanAndInvalidate();
    __delay(1);
    __writeMemory32(0, 0xE000ED00+0x250, "Memory");
    __delay(1);	
}

execUserExit()
{
	__var t2;
	__var reg0;
	__message "execUserExit...";
}

